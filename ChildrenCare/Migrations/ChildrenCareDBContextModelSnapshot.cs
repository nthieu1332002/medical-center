// <auto-generated />
using System;
using ChildrenCare.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ChildrenCare.Migrations
{
    [DbContext(typeof(ChildrenCareDBContext))]
    partial class ChildrenCareDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ChildrenCare.Entities.AppParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppParameters");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Status that a user account has when it's active",
                            DisplayName = "Active",
                            Name = "Active User Status Id",
                            Type = 1,
                            Value = ""
                        },
                        new
                        {
                            Id = 2,
                            Description = "Status that a user account has when it's not active",
                            DisplayName = "Inactive",
                            Name = "Inactive User Status Id",
                            Type = 1,
                            Value = ""
                        },
                        new
                        {
                            Id = 3,
                            Description = "Status that a service has when it's active",
                            DisplayName = "Active",
                            Name = "Active Service Status Id",
                            Type = 2,
                            Value = ""
                        },
                        new
                        {
                            Id = 4,
                            Description = "Status that a service has when it's not active",
                            DisplayName = "Inactive",
                            Name = "Inactive Service Status Id",
                            Type = 2,
                            Value = ""
                        },
                        new
                        {
                            Id = 5,
                            Description = "Status that a service will have when it's created",
                            DisplayName = "New Service Status Id",
                            Name = "New Service Status Id",
                            Type = 2,
                            Value = "3"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Status that a blog has when it's active",
                            DisplayName = "Active",
                            Name = "Active Blog Status Id",
                            Type = 3,
                            Value = ""
                        },
                        new
                        {
                            Id = 7,
                            Description = "Status that a blog has when it's not active",
                            DisplayName = "Inactive",
                            Name = "Inactive Blog Status Id",
                            Type = 3,
                            Value = ""
                        },
                        new
                        {
                            Id = 8,
                            Description = "Status that a blog will have when it's created",
                            DisplayName = "New Blog Status Id",
                            Name = "New Blog Status Id",
                            Type = 3,
                            Value = "6"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Status that a reservation will have when it's created by customer",
                            DisplayName = "Submitted",
                            Name = "Submitted Reservation Status Id",
                            Type = 4,
                            Value = ""
                        },
                        new
                        {
                            Id = 10,
                            Description = "Status that a reservation will have when it's approved by manager",
                            DisplayName = "Approved",
                            Name = "Approved Reservation Status Id",
                            Type = 4,
                            Value = ""
                        },
                        new
                        {
                            Id = 11,
                            Description = "Status that a reservation will have when it's marked success by manager",
                            DisplayName = "Success",
                            Name = "Success Reservation Status Id",
                            Type = 4,
                            Value = ""
                        },
                        new
                        {
                            Id = 12,
                            Description = "Status that a reservation will have when it's cancelled by customer or manager",
                            DisplayName = "Cancelled",
                            Name = "Cancelled Reservation Status Id",
                            Type = 4,
                            Value = ""
                        },
                        new
                        {
                            Id = 13,
                            Description = "Status that a Slider has when it's active",
                            DisplayName = "Active",
                            Name = "Active Slider Status Id",
                            Type = 5,
                            Value = ""
                        },
                        new
                        {
                            Id = 14,
                            Description = "Status that a Slider has when it's not active",
                            DisplayName = "Inactive",
                            Name = "Inactive Slider Status Id",
                            Type = 5,
                            Value = ""
                        },
                        new
                        {
                            Id = 15,
                            Description = "Status that a Slider will have when it's created",
                            DisplayName = "New Slider Status Id",
                            Name = "New Slider Status Id",
                            Type = 5,
                            Value = "13"
                        },
                        new
                        {
                            Id = 16,
                            Description = "Status that a Reservation will have when it's created but not submitted by customer",
                            DisplayName = "Draft",
                            Name = "Draft Reservation Status Id",
                            Type = 4,
                            Value = ""
                        });
                });

            modelBuilder.Entity("ChildrenCare.Entities.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "17cf3f18-16f3-4940-ab5b-c19827383cef",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "db3eb56e-5f1b-4337-99a7-a979c14b20a3",
                            Name = "manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "eb93c415-1601-411b-a9bd-cf1729822eb9",
                            Name = "doctor",
                            NormalizedName = "DOCTOR"
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = "e800b099-6500-4357-b8c5-7a3cac71106f",
                            Name = "nurse",
                            NormalizedName = "NURSE"
                        },
                        new
                        {
                            Id = 5,
                            ConcurrencyStamp = "66c142b1-48a8-4630-baf9-753c50de9758",
                            Name = "customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("ChildrenCare.Entities.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPotentialCustomer")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1980e87d-2598-4548-b9a8-f78818d687d7",
                            Email = "doctor1@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Doctor 1",
                            Gender = true,
                            IsPotentialCustomer = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR1@GMAIL.COM",
                            NormalizedUserName = "DOCTOR1@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGd0+eWoiCIzUIjCGM6x0nuxNzgcfiRNj6zfyYnSfim2h3tuzvYAjo9gymyJD7uCgg==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            TwoFactorEnabled = false,
                            UserName = "doctor1@gmail.com"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cdc87c67-985c-4d72-a14f-4f7599401d65",
                            Email = "doctor2@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Doctor 2",
                            Gender = true,
                            IsPotentialCustomer = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR2@GMAIL.COM",
                            NormalizedUserName = "DOCTOR2@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGd0+eWoiCIzUIjCGM6x0nuxNzgcfiRNj6zfyYnSfim2h3tuzvYAjo9gymyJD7uCgg==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            TwoFactorEnabled = false,
                            UserName = "doctor2@gmail.com"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dbeca50f-90f7-4312-a3b4-671f6dbef976",
                            Email = "doctor3@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Doctor 3",
                            Gender = true,
                            IsPotentialCustomer = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR3@GMAIL.COM",
                            NormalizedUserName = "DOCTOR3@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGd0+eWoiCIzUIjCGM6x0nuxNzgcfiRNj6zfyYnSfim2h3tuzvYAjo9gymyJD7uCgg==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            TwoFactorEnabled = false,
                            UserName = "doctor3@gmail.com"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b9a201ef-a5da-4d05-81b0-53fbd7f0ca99",
                            Email = "nurse1@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Nurse 1",
                            Gender = true,
                            IsPotentialCustomer = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "NURSE1@GMAIL.COM",
                            NormalizedUserName = "NURSE1@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGd0+eWoiCIzUIjCGM6x0nuxNzgcfiRNj6zfyYnSfim2h3tuzvYAjo9gymyJD7uCgg==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            TwoFactorEnabled = false,
                            UserName = "nurse1@gmail.com"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "166648c7-ae8d-4b58-b252-81a3593ee66d",
                            Email = "nurse2@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Nurse 2",
                            Gender = true,
                            IsPotentialCustomer = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "NURSE2@GMAIL.COM",
                            NormalizedUserName = "NURSE2@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGd0+eWoiCIzUIjCGM6x0nuxNzgcfiRNj6zfyYnSfim2h3tuzvYAjo9gymyJD7uCgg==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            TwoFactorEnabled = false,
                            UserName = "nurse2@gmail.com"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "346f2653-0005-48ca-8f68-2581fd64f815",
                            Email = "nurse3@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Nurse 3",
                            Gender = true,
                            IsPotentialCustomer = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "NURSE3@GMAIL.COM",
                            NormalizedUserName = "NURSE3@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGd0+eWoiCIzUIjCGM6x0nuxNzgcfiRNj6zfyYnSfim2h3tuzvYAjo9gymyJD7uCgg==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            TwoFactorEnabled = false,
                            UserName = "nurse3@gmail.com"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "36457045-c08b-4be8-8c5e-0510b972e26f",
                            Email = "admin1@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Admin 1",
                            Gender = true,
                            IsPotentialCustomer = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN1@GMAIL.COM",
                            NormalizedUserName = "ADMIN1@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGd0+eWoiCIzUIjCGM6x0nuxNzgcfiRNj6zfyYnSfim2h3tuzvYAjo9gymyJD7uCgg==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            TwoFactorEnabled = false,
                            UserName = "admin1@gmail.com"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d8735d32-7c47-4a93-be5b-22321ff741f0",
                            Email = "manager1@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Manager 1",
                            Gender = true,
                            IsPotentialCustomer = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MANAGER1@GMAIL.COM",
                            NormalizedUserName = "MANAGER1@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGd0+eWoiCIzUIjCGM6x0nuxNzgcfiRNj6zfyYnSfim2h3tuzvYAjo9gymyJD7uCgg==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            TwoFactorEnabled = false,
                            UserName = "manager1@gmail.com"
                        });
                });

            modelBuilder.Entity("ChildrenCare.Entities.Blog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AuthorUserId")
                        .HasColumnType("int");

                    b.Property<string>("BlogBody")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BriefInfo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<string>("ThumbnailUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tittle")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorUserId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("ChildrenCare.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Cardiology"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Neurology"
                        },
                        new
                        {
                            Id = 3,
                            Name = "News"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Opinion"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Scientific Paper"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Advertisement"
                        });
                });

            modelBuilder.Entity("ChildrenCare.Entities.FeedBacks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReservationServiceId")
                        .HasColumnType("int");

                    b.Property<int>("Star")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReservationServiceId");

                    b.ToTable("FeedBacks");
                });

            modelBuilder.Entity("ChildrenCare.Entities.Prescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AuthorAccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerAccountId")
                        .HasColumnType("int");

                    b.Property<string>("PrescriptionContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorAccountId");

                    b.HasIndex("CustomerAccountId");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("ChildrenCare.Entities.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<long>("ActualTotalPrice")
                        .HasColumnType("bigint");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerAccountId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("CustomerGender")
                        .HasColumnType("bit");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PrescriptionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PreservedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<long>("TotalBasePrice")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CustomerAccountId");

                    b.HasIndex("PrescriptionId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("ChildrenCare.Entities.ReservationDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<long>("BasePrice")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<int>("NumberOfPeople")
                        .HasColumnType("int");

                    b.Property<int>("ReservationId")
                        .HasColumnType("int");

                    b.Property<long?>("SalePrice")
                        .HasColumnType("bigint");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int?>("StaffId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReservationId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("StaffId");

                    b.ToTable("ReservationDetails");
                });

            modelBuilder.Entity("ChildrenCare.Entities.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("BriefInfo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("Price")
                        .HasColumnType("bigint");

                    b.Property<long?>("SalePrice")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("ThumbnailUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BriefInfo = "Treatment of disorders of the heart and the blood vessels",
                            CreatedDate = new DateTime(2022, 7, 7, 21, 51, 16, 804, DateTimeKind.Local).AddTicks(8651),
                            Description = "Cardiology is a branch of internal medicine. A cardiologist is not the same as a cardiac surgeon. \r\n                A cardiac surgeon opens the chest and performs heart surgery.\r\n                A cardiologist specializes in diagnosing and treating diseases of the cardiovascular system.The cardiologist will carry out tests,\r\n                and they may perform some procedures,\r\n                such as heart catheterizations,\r\n                angioplasty,\r\n                or inserting a pacemaker.\r\n                Heart disease relates specifically to the heart, while cardiovascular disease affects the heart, the blood vessels, or both.\r\n                To become a cardiologist in the United States, it is necessary to complete 4 years of medical school, 3 years of training in internal medicine, and at least 3 years specializing in cardiology.",
                            IsFeatured = false,
                            LastUpdated = new DateTime(2022, 7, 7, 21, 51, 16, 804, DateTimeKind.Local).AddTicks(8659),
                            Name = "Cardiology",
                            Price = 250000L,
                            SalePrice = 200000L,
                            Status = 1,
                            ThumbnailUrl = "https://placeimg.com/500/500/tech"
                        },
                        new
                        {
                            Id = 2,
                            BriefInfo = "BriefInfo of Surgery",
                            CreatedDate = new DateTime(2022, 7, 7, 21, 51, 16, 804, DateTimeKind.Local).AddTicks(8660),
                            Description = "Long Description of Surgery",
                            IsFeatured = false,
                            LastUpdated = new DateTime(2022, 7, 7, 21, 51, 16, 804, DateTimeKind.Local).AddTicks(8661),
                            Name = "Surgery",
                            Price = 300000L,
                            SalePrice = 250000L,
                            Status = 1,
                            ThumbnailUrl = "https://placeimg.com/500/500/tech"
                        },
                        new
                        {
                            Id = 3,
                            BriefInfo = "BriefInfo of General Examination",
                            CreatedDate = new DateTime(2022, 7, 7, 21, 51, 16, 804, DateTimeKind.Local).AddTicks(8662),
                            Description = "Long Description of General Examination",
                            IsFeatured = false,
                            LastUpdated = new DateTime(2022, 7, 7, 21, 51, 16, 804, DateTimeKind.Local).AddTicks(8663),
                            Name = "General Examination",
                            Price = 500000L,
                            SalePrice = 400000L,
                            Status = 1,
                            ThumbnailUrl = "https://placeimg.com/500/500/tech"
                        },
                        new
                        {
                            Id = 4,
                            BriefInfo = "BriefInfo of Diagnosis",
                            CreatedDate = new DateTime(2022, 7, 7, 21, 51, 16, 804, DateTimeKind.Local).AddTicks(8664),
                            Description = "Long Description of Diagnosis",
                            IsFeatured = false,
                            LastUpdated = new DateTime(2022, 7, 7, 21, 51, 16, 804, DateTimeKind.Local).AddTicks(8664),
                            Name = "Diagnosis",
                            Price = 100000L,
                            SalePrice = 80000L,
                            Status = 1,
                            ThumbnailUrl = "https://placeimg.com/500/500/tech"
                        },
                        new
                        {
                            Id = 5,
                            BriefInfo = "BriefInfo of Digital Testing",
                            CreatedDate = new DateTime(2022, 7, 7, 21, 51, 16, 804, DateTimeKind.Local).AddTicks(8666),
                            Description = "Long Description of Digital Testing",
                            IsFeatured = false,
                            LastUpdated = new DateTime(2022, 7, 7, 21, 51, 16, 804, DateTimeKind.Local).AddTicks(8667),
                            Name = "Digital Testing",
                            Price = 100000L,
                            SalePrice = 80000L,
                            Status = 1,
                            ThumbnailUrl = "https://placeimg.com/500/500/tech"
                        },
                        new
                        {
                            Id = 6,
                            BriefInfo = "BriefInfo of Fake Service",
                            CreatedDate = new DateTime(2022, 7, 7, 21, 51, 16, 804, DateTimeKind.Local).AddTicks(8668),
                            Description = "Long Description of Fake Service",
                            IsFeatured = false,
                            LastUpdated = new DateTime(2022, 7, 7, 21, 51, 16, 804, DateTimeKind.Local).AddTicks(8668),
                            Name = "Fake Service",
                            Price = 999999999L,
                            SalePrice = 999999L,
                            Status = 2,
                            ThumbnailUrl = "https://placeimg.com/500/500/tech"
                        });
                });

            modelBuilder.Entity("ChildrenCare.Entities.Slider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("BackLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("ThumbnailUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Sliders");
                });

            modelBuilder.Entity("ChildrenCare.Entities.StaffSpecialization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.HasIndex("StaffId");

                    b.ToTable("StaffSpecializations");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ChildrenCare.Entities.Blog", b =>
                {
                    b.HasOne("ChildrenCare.Entities.AppUser", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChildrenCare.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ChildrenCare.Entities.FeedBacks", b =>
                {
                    b.HasOne("ChildrenCare.Entities.ReservationDetail", "ReservationService")
                        .WithMany()
                        .HasForeignKey("ReservationServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReservationService");
                });

            modelBuilder.Entity("ChildrenCare.Entities.Prescription", b =>
                {
                    b.HasOne("ChildrenCare.Entities.AppUser", "AuthorAccount")
                        .WithMany()
                        .HasForeignKey("AuthorAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ChildrenCare.Entities.AppUser", "CustomerAccount")
                        .WithMany()
                        .HasForeignKey("CustomerAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AuthorAccount");

                    b.Navigation("CustomerAccount");
                });

            modelBuilder.Entity("ChildrenCare.Entities.Reservation", b =>
                {
                    b.HasOne("ChildrenCare.Entities.AppUser", "CustomerAccount")
                        .WithMany("Reservations")
                        .HasForeignKey("CustomerAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ChildrenCare.Entities.Prescription", "Prescription")
                        .WithMany()
                        .HasForeignKey("PrescriptionId");

                    b.Navigation("CustomerAccount");

                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("ChildrenCare.Entities.ReservationDetail", b =>
                {
                    b.HasOne("ChildrenCare.Entities.Reservation", "Reservation")
                        .WithMany("ReservationDetails")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChildrenCare.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChildrenCare.Entities.AppUser", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId");

                    b.Navigation("Reservation");

                    b.Navigation("Service");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("ChildrenCare.Entities.StaffSpecialization", b =>
                {
                    b.HasOne("ChildrenCare.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChildrenCare.Entities.AppUser", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("ChildrenCare.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("ChildrenCare.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("ChildrenCare.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("ChildrenCare.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChildrenCare.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("ChildrenCare.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChildrenCare.Entities.AppUser", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("ChildrenCare.Entities.Reservation", b =>
                {
                    b.Navigation("ReservationDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
